#ifndef EXPORTIMPORTSTRUCT_H
#define EXPORTIMPORTSTRUCT_H

#include <string>
#include <glm/mat4x4.hpp>

struct ControlPtStruct {
	float coords[3];
	int blendingJointIdx[4];
	float blendingWeight[4];
};

struct FaceStruct {
	int indices[3];
	float normal[3][3];
	float uv[3][2];
};

struct Mat4Struct {
	float mat[16];

	Mat4Struct() { memset(mat, 0x00, 16 * sizeof(float)); }
	Mat4Struct(glm::mat4 mat_) {
		for (int i = 0; i < 4; ++i)
			for(int j=0;j<4;++j)
				mat[i*4+j] = mat_[i][j];
	}

    glm::mat4 getGlmMat() {
		glm::mat4 retMat;

		for (int i = 0; i < 4; ++i)
			for (int j = 0; j < 4; ++j)
				retMat[i][j] = mat[i * 4 + j];

		return retMat;
	}
};

struct JointStruct {
	int parentIdx;
	Mat4Struct globalBindposeInverse;
};

struct FrameStruct {
	int frameNr;
	Mat4Struct globalTransform;
};

struct AxisStruct {
	float x[3];
	float y[3];
	float z[3];

	AxisStruct() {}

	AxisStruct(glm::vec3 x_, glm::vec3 y_, glm::vec3 z_) {
		x[0] = x_.x; x[1] = x_.y; x[2] = x_.z;
		y[0] = y_.x; y[1] = y_.y; y[2] = y_.z;
		z[0] = z_.x; z[1] = z_.y; z[2] = z_.z;
	}

	glm::vec3 GetX_axis()const {
		glm::vec3 glm_x(x[0], x[1], x[2]);
		return glm_x;
	}
	glm::vec3 GetY_axis()const {
		glm::vec3 glm_y(y[0], y[1], y[2]);
		return glm_y;
	}
	glm::vec3 GetZ_axis()const {
		glm::vec3 glm_z(z[0], z[1], z[2]);
		return glm_z;
	}
};

namespace FILEHDR {
	const char header[6] = { 0x4d,0x47,0x52,0x48,0x44,0x52 };
	const char footer[6] = { 0x4d,0x47,0x52,0x46,0x54,0x52 };
	const char controlPtHeader[13] = { 0x22,0x04,0x0e,0x0f,0x07,0x0f,0x07,0x29,0x0f,0x04,0x03,0x14,0x0e };
	const char controlPtFooter[19] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x22,0x04,0x0e,0x0f,0x07,0x0f,0x07,0x29,0x0f,0x04,0x03,0x14,0x0e };
	const char facesHeader[5] = { 0x25,0x34,0x03,0x00,0x08 };
	const char facesFooter[11] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x25,0x34,0x03,0x00,0x08 };
	const char skeletonHeader[8] = { 0x32,0x00,0x05,0x07,0x38,0x14,0x0a,0x03 };
	const char skeletonFooter[14] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x32,0x00,0x05,0x07,0x38,0x14,0x0a,0x03,};
	const char jointHeader[5] = { 0x29,0x04,0x09,0x09,0x09 };
	const char jointFooter[11] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x29,0x04,0x09,0x09,0x09 };
	const char animationsHeader[10] = { 0x20,0x03,0x09,0x08,0x34,0x14,0x04,0x04,0x0e,0x0e };
	const char animationsFooter[16] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x20,0x03,0x09,0x08,0x34,0x14,0x04,0x04,0x0e,0x0e };
	const char objectHeader[6] = { 0x2e,0x35,0x0a,0x00,0x36,0x14 };
	const char objectFooter[12] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x2e,0x35,0x0a,0x00,0x36,0x14 };
	const char modelHeader[6] = { 0x2c,0x04,0x04,0x00,0x01 };
	const char modelFooter[12] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x2c,0x04,0x04,0x00,0x01 };
	const char frameHeader[5] = { 0x25,0x07,0x01,0x08,0x38 };
	const char frameFooter[11] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x25,0x07,0x01,0x08,0x38 };

	const char hitboxHeader[6] = { 0x27,0x3c,0x14,0x3b,0x04,0x18 };
	const char hitboxFooter[12] = { 0x25,0x04,0x0f,0x0f,0x38,0x12,0x27,0x3c,0x14,0x3b,0x04,0x18 };
}

#endif //EXPORTIMPORTSTRUCT_H
